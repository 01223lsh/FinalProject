<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="funding.dao.face.AdminDao">
	
	<select id="selectMemberAll" resultType="funding.dto.Member" parameterType="int">
		select * from (
			select rownum rnum, A.* from(
				select * from member
				order by member_no desc
			)A
		) member
		where rnum between #{startNo} and #{endNo}
	</select>
	   
	<select id="selectBymemberNo" resultType="funding.dto.Member" parameterType="int">
		select * from member
		where member_no = #{memberNo}
	
	</select>
	<select id="selectCntMember" resultType="int">
		select count(*) from member
	</select>
	<select id="selectCntMemberGrade" resultType="int" parameterType="int">
		select count(*) from member
		where grade = ${i}
	
	</select>
	<select id="selectCntMemberSearch" resultType="int" parameterType="string">
		select count(*) from member
		where ${category} like '%'||#{content}||'%'
	</select>
	

	
	<select id="selectByGrade" resultType="funding.dto.Member" parameterType="int">
		<choose>
			<when test='grade == null or grade.equals("")'>
			select * from (
		         select rownum rnum, B.* from(
		            select * from member
		            order by member_no desc
		         )B
		      ) member
		      where rnum between #{paging.startNo} and #{paging.endNo}
			</when>
		
			<when test='grade != null or grade.equals("")'>
		      select * from (
		         select rownum rnum, B.* from(
		            select * from member
		            where grade =#{grade}
		            order by member_no desc
		         )B
		      ) member
		      where rnum between #{paging.startNo} and #{paging.endNo}
			</when>
		</choose>
	</select>
	<update id="gradeUpdate" parameterType="funding.dto.Member">
		update member set grade = #{grade}
		where member_no = #{memberNo}
		
	</update>
	
	<select id="MemberSearch" resultType="funding.dto.Member">
		
		select * from (
		     select rownum rnum, B.* from(
		         select * from member
		         where ${category} like '%'||#{content}||'%'
		          order by member_no desc
		        )B
		     ) member
		where rnum between #{paging.startNo} and #{paging.endNo}
	</select>
	<delete id="DisabledAllDelete" parameterType="int">
		delete from member
		where grade = #{i}
	</delete>
	
	<select id="selectCntNotice" resultType="int">
		select count(*) from notice
	</select>
	<select id ="selectCntProject" resultType="int">
		select count(*) from project
		where project_step in(3,4)
		<if test="step!=5"> 
			and project_step = #{step}
		</if>
		<if test="categoryNo!=0">
			and category_no = #{categoryNo}
		</if>
	</select>
	<select id="noticeAll" resultType="funding.dto.Notice">
	
		select * from (
		     select rownum rnum, N.* from(
		         select * from notice
		          order by notice_no desc
		        )N
		     ) notice
		where rnum between #{startNo} and #{endNo}
	</select>
	
	<select id="selectByNotice" resultType="funding.dto.Notice">

		select notice_no,title,content from notice
		where notice_no = #{noticeNo} 
	</select>
	<select id="selectByNoticeFile" resultType="funding.dto.NoticeFile" parameterType="funding.dto.Notice">
		select 
		file_no fileNo
		,notice_no noticeNo
		,file_origin fileOrigin
		,file_storage fileStorage
		 from noticefile
		where notice_no = #{noticeNo}
	</select>
	<delete id="fileNoByDelete" parameterType="int">
		delete from noticefile
		where notice_no = #{notice.noticeNo}
		and file_no not in
		<foreach collection="fileNolist" item="item"  open="(" separator="," close=")" > 
	     #{item} 
		</foreach>
	</delete>
	
	<select id="selectBynoticeno" resultType="int">
		select notice_seq.nextval from dual
	</select>
	
	<insert id="noticeWrite" parameterType="funding.dto.Notice">
		insert into notice(notice_no, title, content)
		values(#{noticeNo},#{title},#{content})
	</insert>
	
    <insert id="insertNoticeFile" parameterType="funding.dto.Notice" >
    	insert into noticefile
    	values(noticefile_seq.nextval,#{noticeNo},#{fileOrigin},#{fileStorage})
    </insert>
    
    <select id="selectNoticeFileByFileNo" resultType="funding.dto.Notice">
    	select 
    	file_no fileNo
    	,notice_no noticeNo
    	,file_origin fileOrigin
    	,file_storage fileStorage    	
    	from noticefile
    	where file_no = #{fileNo}
    
    </select>
    <update id="noticeUpdate" parameterType="funding.dto.Notice">
    	update notice set title=#{title}, content=#{content}
    	where notice_no = #{noticeNo}
    </update>
    <update id="updateNoticeFile" parameterType="funding.dto.Notice">
    	update noticefile set file_origin=#{fileOrigin}, file_storage=#{fileStorage}
    	where file_no = #{fileNo}
    </update>
    
    <delete id="noticeDelete" parameterType="funding.dto.Notice">
    	delete from notice
    	where notice_no = #{noticeNo}
    </delete>
    <delete id="noticeFileDelete" parameterType="funding.dto.Notice">
    	delete from noticefile
    	where notice_no = #{noticeNo}
    </delete>
    <select id="projectList" resultType="funding.dto.Project" >
    	select * from (
		     select rownum rnum, N.* from(
		         select * from project 
		      		where project_step between 3 and 4
		      		<if test="step!=5">
						and project_step = #{step}
					</if>
					<if test="categoryNo!=0">
						and category_no = #{categoryNo}
					</if>
		          order by project_no desc
		        )N
		     ) project
		where rnum between #{paging.startNo} and #{paging.endNo}
    </select>
    <select id="selectCntapproveProject" resultType="int">
    	select count(*) from project
    	where project_step = 1
    </select>

	<!-- create by young -->
	<!-- 심사대기중인 프로젝트 목록 -->
	<select id="findAllWaitingProject" resultType="funding.dto.Project">
		select * from (
		     select rownum rnum, N.* from(
		         select * from project 
		      		where project_step =1
		          order by project_no desc
		        )N
		     ) project
		where rnum between #{startNo} and #{endNo}
	</select>

	<!-- create by young -->
	<!-- 프로젝트 상태 업데이트 -->
	<update id="updateProjectStep" parameterType="funding.dto.Project">
		update project
		set project_step = #{projectStep}
		where project_no = #{projectNo}
	</update>

	<select id="findByNo" resultType="funding.dto.Project" parameterType="funding.dto.Project">
		select *
		from project
		where project_no = #{projectNo}
	</select>
	
	<select id="categoryList" resultType="funding.dto.Category">
		select * from category
		order by category_no
	</select>
	<select id="selectCntQna" resultType="int">
		select count(*) from qna
		where 1=1
		<choose>
			<when test="complete==1">
				and qna_refer IN (
				SELECT qna_refer
				FROM qna
				GROUP BY qna_refer 
				HAVING COUNT(*) &lt; 2)
			</when>
			<when test="complete==2">
				and qna_refer IN (
				SELECT qna_refer
				FROM qna
				GROUP BY qna_refer
				HAVING COUNT(*) &gt; 1)
			</when>
		
		</choose>
	</select>
	<select id="selectQnaList" resultType="funding.dto.Qna" >
		select row_number() over(order by rnum desc) as rnum2, QNA.* from (
   			 select rownum rnum, Q.* from(
   			     select
           			 QNA_NO, QNA_TITLE, NICK, QNA_CONTENT, QNA_CREATE_DATE ,QNA_REFER, QNA_STEP, QNA_DEPTH, MEMBER_NO
       			 from qna
       			 WHERE 1=1
       			 <choose>
					<when test="complete==1">
						and qna_refer IN (
						SELECT qna_refer
						FROM qna
						GROUP BY qna_refer 
						HAVING COUNT(*) &lt; 2)
					</when>
					<when test="complete==2">
						and qna_refer IN (
						SELECT qna_refer
						FROM qna
						GROUP BY qna_refer
						HAVING COUNT(*) &gt; 1)
					</when>
				</choose>
       			 order by qna_refer desc, qna_step)Q
    		)QNA
		WHERE rnum between #{paging.startNo } and #{paging.endNo }
		ORDER BY rnum2 desc
	</select>
	<select id="selectByQnaNo" resultType="funding.dto.Qna" parameterType="funding.dto.Qna">
		SELECT * FROM qna
		WHERE qna_no = #{qnaNo}
	</select>    
	
	<delete id="deleteQna" parameterType="funding.dto.Qna">
    	DELETE qna
    	WHERE qna_no = #{qnaNo}
    </delete>
    
    	<update id="updateQnaAll" parameterType="funding.dto.Qna">
		UPDATE qna
		SET qna_step = qna_step+1
		WHERE qna_refer = (select qna_refer from qna where qna_no = #{qnaNo})
		AND qna_step > (select qna_step from qna where qna_no = #{qnaNo})
	</update>
	
	
	<insert id="insertQnare" parameterType="funding.dto.Qna">
		INSERT INTO qna (QNA_NO, QNA_TITLE, NICK, QNA_CONTENT, QNA_REFER, QNA_STEP, QNA_DEPTH, MEMBER_NO)
		VALUES(qna_seq.nextval, #{qnaTitle }, #{nick} , #{qnaContent},
		    (select qna_refer from qna where qna_no = #{qnaNo}),
		    (select qna_step from qna where qna_no = #{qnaNo})+1 ,
		    (select qna_depth from qna where qna_no = #{qnaNo})+1 , #{memberNo})
	
	</insert>
	<select id="selectQnaListStep" resultType="funding.dto.Qna">
		select * from qna
		where qna_step = 0
	</select>
</mapper>














