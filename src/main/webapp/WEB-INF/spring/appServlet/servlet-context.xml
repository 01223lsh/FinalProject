<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"

	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">


	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<aop:aspectj-autoproxy />

	<tx:annotation-driven/>    
    

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/noticeimg/**" location="/noticeimg/" />
	<resources mapping="/projectImage/**" location="/projectImage/" />
	<resources mapping="/projectPhoto/**" location="/projectPhoto/" />

	
	<interceptors>
	
		<interceptor>
		
			<!-- 인터셉터 적용될 URL -->
			<mapping path="/admin/**"/>
			
			<!-- 인터셉터 클래스 지정 -->
			<beans:bean class="funding.interceptor.AdminInterceptor"/>
			
		</interceptor>
		<interceptor>
		
			<!-- 인터셉터 적용될 URL -->
			<mapping path="/member/loginform"/>
						
			<!-- 인터셉터 클래스 지정 -->
			<beans:bean class="funding.interceptor.MainInterceptor"/>
			
		</interceptor>
	</interceptors>

	<resources mapping="/projectImage/**" location="/projectImage/" />

	<resources mapping="/projectPhoto/**" location="/projectPhoto/" />
	
	<resources mapping="/ckImg/**" location="/img/" />
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />

	</beans:bean>
	
	<!-- MultipartResover 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxInMemorySize" value="1048576"/> <!-- 1MB -->
		<beans:property name="maxUploadSize" value="10485760"/> <!-- 10MB -->
		<beans:property name="maxUploadSizePerFile" value="5242880" /> <!-- 5MB -->
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	

	<!-- 네이버로그인 api 사용 bean 설정 추가-->
	<beans:bean id="naverLoginBO" class="funding.controller.NaverLoginBO" />
	
	<!-- SMTP mail설정 -->
	<beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com"/> <!-- 메이서버 호스트 -->
		<beans:property name="port" value="587"/> <!-- 메이서버 포트번호 -->
		<beans:property name="username" value="finaltest2221@gmail.com"/> <!-- 자신의 이메일 아이디 -->
		<beans:property name="password" value="final2221@@"/> <!-- 자신의 비밀번호 -->
	
		<!-- 보안연결 SSL과 관련된 설정 --> 
		<beans:property name="javaMailProperties"> 
			<beans:props> 
				<beans:prop key="mail.smtp.auth">true</beans:prop> 
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop> 
				<beans:prop key="mail.smtps.checkserveridentity">true</beans:prop>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop> 
				<beans:prop key="mail.smtps.ssl.trust">*</beans:prop> 
				<beans:prop key="mail.debug">true</beans:prop> 
				<beans:prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	<!-- navermail 설정 end -->
	
	 <!-- websocket handler -->
	<!--<beans:bean id="replyEchoHandler"
		class="com.test.www.ReplyEchoHandler" />
	<websocket:handlers>
		<websocket:mapping path="/replyEcho"
			handler="replyEchoHandler" />
		<websocket:handshake-interceptors>
			<beans:bean
				class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
		</websocket:handshake-interceptors>
	</websocket:handlers> -->

	<!-- websocket handler -->
	<beans:bean id="replyEchoHandler" class="funding.handler.ReplyEchoHandler"/>
	<websocket:handlers>
		<websocket:mapping path="/replyEcho" handler="replyEchoHandler"/>
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
	</websocket:handlers>
	
	<!-- HandlerInterceptor interface를 사용하기 위한 태그 -->
	<!-- 인터셉터 설정 -->
	<interceptors>
		<interceptor>
			<!-- 인터셉터가 적용될 URL -->
			<mapping path="/payment/**"/>
			<!-- URL과 매핑 시켜줄 interceptor 위치 -->
			<beans:bean class="funding.interceptor.PaymentInterceptor"/>
		</interceptor>
	</interceptors>
	

	<!-- 스프링 컴포넌트 어노테이션이 붙은 클래스를 스캔할 패키지를 지정한다 -->
	<!-- 	-> @Controller, @Service -->
	<context:component-scan base-package="funding.controller, funding.service, funding.repository, funding.config" />

</beans:beans>


